"use strict";(()=>{var e={};e.id=342,e.ids=[342],e.modules={1185:e=>{e.exports=require("mongoose")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6113:e=>{e.exports=require("crypto")},7147:e=>{e.exports=require("fs")},2037:e=>{e.exports=require("os")},1017:e=>{e.exports=require("path")},7420:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>R,patchFetch:()=>E,requestAsyncStorage:()=>B,routeModule:()=>j,serverHooks:()=>D,staticGenerationAsyncStorage:()=>S});var o={};r.r(o),r.d(o,{DELETE:()=>v,GET:()=>w,POST:()=>q});var a=r(9303),n=r(8716),i=r(670),s=r(3473),c=r(1185),l=r.n(c);let u=new(l()).Schema({title:{type:String,required:!0},description:{type:String,required:!0},category:{type:String,required:!0},author:{type:String,required:!0},image:{type:String,required:!0},authorImg:{type:String,required:!0},date:{type:Date,default:Date.now()}}),g=l().models.Blog||l().model("Blog",u),d=require("fs/promises");var p=r(7070),m=r(1017),f=r.n(m),h=r(7147),y=r.n(h);async function w(e){try{await (0,s.n)();let t=e.nextUrl.searchParams.get("id");if(t){let e=await g.findById(t);return p.NextResponse.json(e)}{let e=await g.find({});return p.NextResponse.json(e)}}catch(e){return console.log("error fetching",e),p.NextResponse.json({message:"Failed to fetch blogs",e:e.message},{status:500})}}let x=f().join(process.cwd(),"public");async function b(e){let t=f().dirname(e);try{await (0,d.mkdir)(t,{recursive:!0})}catch(e){throw console.error("Error creating directory:",e),Error("Error creating directory")}}async function q(e){let t=await e.formData(),r=Date.now(),o=t.get("image"),a=await o.arrayBuffer(),n=Buffer.from(a),i=f().join(x,r.toString(),o.name);await b(i),await (0,d.writeFile)(i,n);let s=`/${r}/${o.name}`;console.log(s);let c={title:`${t.get("title")}`,description:`${t.get("description")}`,category:`${t.get("category")}`,author:`${t.get("author")}`,image:`${s}`,authorImg:`${t.get("authorImg")}`};return await g.create(c),console.log("Blog Saved"),p.NextResponse.json({success:!0,msg:"blog added"})}async function v(e){try{let t=await e.nextUrl.searchParams.get("id"),r=await g.findById(t);return y().unlink(`./public/${r.image}`,()=>{}),await g.findByIdAndDelete(t),p.NextResponse.json({msg:"Blog Deleted"})}catch(e){console.error("couldn't delete the blog from the database error",e)}}let j=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/blog/route",pathname:"/api/blog",filename:"route",bundlePath:"app/api/blog/route"},resolvedPagePath:"G:\\projects\\blogs\\blog-app\\app\\api\\blog\\route.js",nextConfigOutput:"",userland:o}),{requestAsyncStorage:B,staticGenerationAsyncStorage:S,serverHooks:D}=j,R="/api/blog/route";function E(){return(0,i.patchFetch)({serverHooks:D,staticGenerationAsyncStorage:S})}},3473:(e,t,r)=>{r.d(t,{n:()=>c});var o=r(1185),a=r.n(o),n=r(6636);r.n(n)().config();let i=process.env.dbURL;if(!i)throw Error("MONGODB_URL is not set");let s=!1;a().set("debug",!0);let c=async()=>{if(!s)try{await a().connect(i),console.log("DB connected"),s=!0}catch(e){console.log("error connecting DB",e)}}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[948,404],()=>r(7420));module.exports=o})();