"use strict";(()=>{var e={};e.id=433,e.ids=[433],e.modules={1185:e=>{e.exports=require("mongoose")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6113:e=>{e.exports=require("crypto")},7147:e=>{e.exports=require("fs")},2037:e=>{e.exports=require("os")},1017:e=>{e.exports=require("path")},1674:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>v,patchFetch:()=>q,requestAsyncStorage:()=>f,routeModule:()=>h,serverHooks:()=>y,staticGenerationAsyncStorage:()=>w});var a={};t.r(a),t.d(a,{DELETE:()=>x,GET:()=>g,POST:()=>m});var o=t(9303),n=t(8716),i=t(670),s=t(3473),c=t(1185),l=t.n(c);let p=new(l()).Schema({email:{type:String,required:!0},date:{type:Date,default:Date.now}}),u=l().models.Email||l().model("Email",p);var d=t(7070);async function m(e){await (0,s.n)();try{let r=await e.formData(),t={email:`${r.get("email")}`};return await u.create(t),d.NextResponse.json({success:!0,msg:"email Subscribed"})}catch(e){console.error("error",e)}}async function g(e){await (0,s.n)();try{let e=await u.find({});return d.NextResponse.json({emails:e})}catch(e){console.error("error fetching Email",e)}}async function x(e){await (0,s.n)();try{let r=await e.nextUrl.searchParams.get("id");return await u.findByIdAndDelete(r),d.NextResponse.json({success:!0,msg:"email deleted"})}catch(e){console.error("error deleting email",e)}}let h=new o.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/email/route",pathname:"/api/email",filename:"route",bundlePath:"app/api/email/route"},resolvedPagePath:"G:\\projects\\blogs\\blog-app\\app\\api\\email\\route.js",nextConfigOutput:"",userland:a}),{requestAsyncStorage:f,staticGenerationAsyncStorage:w,serverHooks:y}=h,v="/api/email/route";function q(){return(0,i.patchFetch)({serverHooks:y,staticGenerationAsyncStorage:w})}},3473:(e,r,t)=>{t.d(r,{n:()=>c});var a=t(1185),o=t.n(a),n=t(6636);t.n(n)().config();let i=process.env.dbURL;if(!i)throw Error("MONGODB_URL is not set");let s=!1;o().set("debug",!0);let c=async()=>{if(!s)try{await o().connect(i),console.log("DB connected"),s=!0}catch(e){console.log("error connecting DB",e)}}}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),a=r.X(0,[948,404],()=>t(1674));module.exports=a})();